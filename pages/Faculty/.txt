      <div class="container px-5 py-24 mx-auto">
        <div class="flex flex-wrap -m-4">
          {filteredData.length > 0 &&
            notesInSubject
              .filter((item) => item.code === subjectid)
              .map((notes) => (
                <div key={notes._id} class="xl:w-1/3 md:w-1/2 p-4">
                  <div class="border border-gray-200 p-6 rounded-lg">
                    <Link
                      href={{
                        pathname: "/Students/viewNotes",
                        query: { path: `${notes.filename}`, file: notes._id },
                      }}
                      class="text-indigo-500 inline-flex items-center"
                    >
                      Preview
                    </Link>
                    <Link
                      href={notes.filename}
                      class="text-lg text-gray-900 font-medium title-font mb-2"
                    >
                      {notes.description}
                    </Link>
                    <p class="leading-relaxed text-base">{notes.description}</p>
                  </div>
                </div>
              ))}
          {filesInSubject.map((items) => (
            <div key={items._id} class="xl:w-1/3 md:w-1/2 p-4">
              <div class="border border-gray-200 p-6 rounded-lg">
                <Link
                  href={{
                    pathname: "/Students/viewNotes",
                    query: { path: `${items.file_path}`, file: items._id },
                  }}
                  class="text-indigo-500 inline-flex items-center"
                >
                  Preview
                </Link>
                <Link
                  href={items.file_path}
                  class="text-lg text-gray-900 font-medium title-font mb-2"
                >
                  {items.title}
                </Link>
                <p class="leading-relaxed text-base">{items.description}</p>
              </div>
            </div>
          ))}
        </div>
      </div>

      <h1>subject id : {subjectid}</h1>
      <Link
        href={{
          pathname: "/Faculty/facultyUpload",
          query: { id: subjectid },
        }}
        class="text-indigo-500 inline-flex items-center"
      >
        Upload
      </Link>
      <Link
        href={{
          pathname: "/Faculty/fileUpload",
          query: { id: subjectid },
        }}
        class="text-indigo-500 inline-flex items-center"
      >
        Upload
      </Link>

import Image from "next/image";
import { Inter } from "next/font/google";
import React, { useState, useRef, useEffect } from "react";
import Dropzone from "react-dropzone";
import axios from "axios";
import { Form, Row, Col, Button } from "react-bootstrap";
import { useRouter } from "next/router";
import jwt_decode from "jwt-decode";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const router = useRouter();
  const { id } = router.query;
  const subjectid = id;
  const [file, setFile] = useState(null); // state for storing actual image
  const [previewSrc, setPreviewSrc] = useState(""); // state for storing previewImage
  const [author, setAuthor] = useState("");
  const [departmentid, setDepartmentid] = useState("");
  const [state, setState] = useState({
    title: "",
    description: "",
    code: "",
  });
  const [errorMsg, setErrorMsg] = useState("");
  const [isPreviewAvailable, setIsPreviewAvailable] = useState(false); // state to show preview only for images
  const dropRef = useRef(); // React ref for managing the hover state of droppable area

  useEffect(() => {
    const token = localStorage.getItem("token");
    const decodedToken = jwt_decode(token);
    if (!token || token.isFaculty === true) {
      router.push("/Faculty/login");
    }
    setAuthor(decodedToken.id);
    setDepartmentid(decodedToken.department);
  }, [router]);

  const handleInputChange = (event) => {
    setState({
      ...state,
      [event.target.name]: event.target.value,
    });
  };

  const onDrop = (files) => {
    const [uploadedFile] = files;
    setFile(uploadedFile);

    const fileReader = new FileReader();
    fileReader.onload = () => {
      setPreviewSrc(fileReader.result);
    };
    fileReader.readAsDataURL(uploadedFile);
    setIsPreviewAvailable(uploadedFile.name.match(/\.(jpeg|jpg|png)$/));
    dropRef.current.style.border = "2px dashed #e9ebeb";
  };

  const updateBorder = (dragState) => {
    if (dragState === "over") {
      dropRef.current.style.border = "2px solid #000";
    } else if (dragState === "leave") {
      dropRef.current.style.border = "2px dashed #e9ebeb";
    }
  };

  const handleOnSubmit = async (event) => {
    event.preventDefault();

    try {
      const { title, description, code } = state;
      if (title.trim() !== "" && description.trim() !== "") {
        if (file) {
          const formData = new FormData();
          formData.append("file", file);
          formData.append("title", title);
          formData.append("description", description);
          formData.append("code", code);
          formData.append("subject", subjectid);
          formData.append("department", departmentid);
          formData.append("author", author);

          setErrorMsg("");
          await axios.post(`/api/faculty/fileUpload`, formData, {
            headers: {
              "Content-Type": "multipart/form-data",
            },
          });
          setFile(null);
          setPreviewSrc("");
          setState({
            title: "",
            description: "",
            code: "",
          });
        } else {
          setErrorMsg("Please select a file to add.");
        }
      } else {
        setErrorMsg("Please enter all the field values.");
      }
    } catch (error) {
      error.response && setErrorMsg(error.response.data);
    }
  };

  return (
    <>
      <section className="text-gray-600 body-font relative">
        <div className="container px-5 py-24 mx-auto flex">
          <div className="lg:w-1/3 md:w-1/2 bg-white rounded-lg p-8 flex flex-col mx-auto w-full mt-10 md:mt-0 relative z-10 shadow-md">
            <h2 className="text-gray-900 text-2xl mb-4 font-medium title-font text-center">
              Upload The File
            </h2>
            <Form className="search-form" onSubmit={handleOnSubmit}>
              {errorMsg && <p className="errorMsg">{errorMsg}</p>}
              <div className="relative mb-4">
                <Row>
                  <Col>
                    <label
                      htmlFor="title"
                      className="leading-7 text-sm text-gray-600"
                    >
                      Enter Title
                    </label>
                    <Form.Group controlId="title">
                      <Form.Control
                        type="text"
                        name="title"
                        value={state.title || ""}
                        placeholder="Enter title"
                        onChange={handleInputChange}
                        className="w-full bg-white rounded border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
                      />
                    </Form.Group>
                  </Col>
                </Row>
              </div>
              <div className="relative mb-4">
                <Row>
                  <Col>
                    <label
                      htmlFor="description"
                      className="leading-7 text-sm text-gray-600"
                    >
                      Enter Description
                    </label>
                    <Form.Group controlId="description">
                      <Form.Control
                        type="text"
                        name="description"
                        value={state.description || ""}
                        placeholder="Enter description"
                        onChange={handleInputChange}
                        className="w-full bg-white rounded border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 h-20 text-base outline-none text-gray-700 py-1 px-3 resize-none leading-6 transition-colors duration-200 ease-in-out"
                      />
                    </Form.Group>
                  </Col>
                </Row>
              </div>
              <div className="relative mb-4">
                <Row>
                  <Col>
                    <label
                      htmlFor="code"
                      className="leading-7 text-sm text-gray-600"
                    >
                      Enter Code
                    </label>
                    <Form.Group controlId="code">
                      <Form.Control
                        type="text"
                        name="code"
                        value={state.code || ""}
                        placeholder="Enter Subject Code"
                        onChange={handleInputChange}
                        className="w-full bg-white rounded border border-gray-300 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
                      />
                    </Form.Group>
                  </Col>
                </Row>
              </div>
              <div className="upload-section">
                <Dropzone
                  onDrop={onDrop}
                  onDragEnter={() => updateBorder("over")}
                  onDragLeave={() => updateBorder("leave")}
                >
                  {({ getRootProps, getInputProps }) => (
                    <div
                      {...getRootProps({
                        className:
                          "drop-zone flex flex-col items-center justify-center border-2 border-dashed rounded-lg p-4",
                      })}
                      ref={dropRef}
                    >
                      <input name="file" id="file" {...getInputProps()} />

                      <p className="mb-2 text-sm text-gray-500 dark:text-gray-400">
                        <span className="font-semibold">Click to upload</span>{" "}
                        or drag and drop
                      </p>
                      <p className="text-xs text-gray-500 dark:text-gray-400">
                        SVG, PNG, JPG or GIF (MAX. 800x400px)
                      </p>
                      <svg
                        aria-hidden="true"
                        className="w-10 h-10 mb-3 text-gray-400"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"
                        ></path>
                      </svg>
                      {file && (
                        <div className="mt-4">
                          <strong className="text-gray-800">
                            Selected file:
                          </strong>{" "}
                          {file.name}
                        </div>
                      )}
                    </div>
                  )}
                </Dropzone>

                {previewSrc ? (
                  isPreviewAvailable ? (
                    <div className="image-preview">
                      <img
                        className="preview-image"
                        src={previewSrc}
                        alt="Preview"
                      />
                    </div>
                  ) : (
                    <div className="preview-message">
                      <p>No preview available for this file</p>
                    </div>
                  )
                ) : (
                  <div className="preview-message">
                    <p>Image preview will be shown here after selection</p>
                  </div>
                )}
              </div>
              <div className="flex justify-centre">
                <Button
                  variant="primary"
                  type="submit"
                  className="text-white bg-indigo-500 border-0 py-2 px-6 focus:outline-none hover:bg-indigo-600 rounded text-lg my-5"
                >
                  Submit
                </Button>
              </div>
            </Form>
          </div>
        </div>
      </section>
    </>
  );
}
